// Generated from WDTPD.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'https://cdn.jsdelivr.net/npm/antlr4@4.13.1/+esm'


const serializedATN = [4,0,51,321,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,
1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,
19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,
1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,
1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,
41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,
5,43,250,8,43,10,43,12,43,253,9,43,1,44,1,44,5,44,257,8,44,10,44,12,44,260,
9,44,1,44,1,44,1,44,5,44,265,8,44,10,44,12,44,268,9,44,1,44,3,44,271,8,44,
1,45,4,45,274,8,45,11,45,12,45,275,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
46,1,46,3,46,287,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,297,8,
47,1,48,1,48,1,48,1,48,5,48,303,8,48,10,48,12,48,306,9,48,1,48,1,48,1,49,
4,49,311,8,49,11,49,12,49,312,1,49,1,49,1,50,4,50,318,8,50,11,50,12,50,319,
0,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
50,101,51,1,0,26,2,0,69,69,101,101,2,0,76,76,108,108,2,0,83,83,115,115,2,
0,94,94,8593,8593,2,0,65,65,97,97,2,0,66,66,98,98,2,0,78,78,110,110,2,0,
81,81,113,113,2,0,82,82,114,114,2,0,84,84,116,116,2,0,73,73,105,105,2,0,
70,70,102,102,2,0,72,72,104,104,2,0,68,68,100,100,2,0,87,87,119,119,2,0,
79,79,111,111,2,0,80,80,112,112,2,0,88,88,120,120,2,0,85,85,117,117,2,0,
65,90,97,122,3,0,48,57,65,90,97,122,1,0,34,34,1,0,39,39,1,0,48,57,2,0,10,
10,13,13,3,0,9,10,13,13,32,32,330,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,103,1,0,0,0,3,105,1,0,0,0,5,110,
1,0,0,0,7,112,1,0,0,0,9,114,1,0,0,0,11,116,1,0,0,0,13,118,1,0,0,0,15,121,
1,0,0,0,17,123,1,0,0,0,19,125,1,0,0,0,21,127,1,0,0,0,23,129,1,0,0,0,25,131,
1,0,0,0,27,133,1,0,0,0,29,135,1,0,0,0,31,137,1,0,0,0,33,139,1,0,0,0,35,141,
1,0,0,0,37,144,1,0,0,0,39,147,1,0,0,0,41,150,1,0,0,0,43,153,1,0,0,0,45,156,
1,0,0,0,47,159,1,0,0,0,49,161,1,0,0,0,51,163,1,0,0,0,53,165,1,0,0,0,55,167,
1,0,0,0,57,169,1,0,0,0,59,173,1,0,0,0,61,177,1,0,0,0,63,182,1,0,0,0,65,186,
1,0,0,0,67,189,1,0,0,0,69,194,1,0,0,0,71,201,1,0,0,0,73,207,1,0,0,0,75,217,
1,0,0,0,77,221,1,0,0,0,79,224,1,0,0,0,81,229,1,0,0,0,83,234,1,0,0,0,85,240,
1,0,0,0,87,247,1,0,0,0,89,270,1,0,0,0,91,273,1,0,0,0,93,286,1,0,0,0,95,296,
1,0,0,0,97,298,1,0,0,0,99,310,1,0,0,0,101,317,1,0,0,0,103,104,5,61,0,0,104,
2,1,0,0,0,105,106,7,0,0,0,106,107,7,1,0,0,107,108,7,2,0,0,108,109,7,0,0,
0,109,4,1,0,0,0,110,111,5,124,0,0,111,6,1,0,0,0,112,113,5,38,0,0,113,8,1,
0,0,0,114,115,5,94,0,0,115,10,1,0,0,0,116,117,5,8593,0,0,117,12,1,0,0,0,
118,119,5,42,0,0,119,120,5,42,0,0,120,14,1,0,0,0,121,122,5,44,0,0,122,16,
1,0,0,0,123,124,5,33,0,0,124,18,1,0,0,0,125,126,7,3,0,0,126,20,1,0,0,0,127,
128,5,42,0,0,128,22,1,0,0,0,129,130,5,47,0,0,130,24,1,0,0,0,131,132,5,37,
0,0,132,26,1,0,0,0,133,134,5,43,0,0,134,28,1,0,0,0,135,136,5,45,0,0,136,
30,1,0,0,0,137,138,5,60,0,0,138,32,1,0,0,0,139,140,5,62,0,0,140,34,1,0,0,
0,141,142,5,60,0,0,142,143,5,61,0,0,143,36,1,0,0,0,144,145,5,62,0,0,145,
146,5,61,0,0,146,38,1,0,0,0,147,148,5,61,0,0,148,149,5,61,0,0,149,40,1,0,
0,0,150,151,5,33,0,0,151,152,5,61,0,0,152,42,1,0,0,0,153,154,5,38,0,0,154,
155,5,38,0,0,155,44,1,0,0,0,156,157,5,124,0,0,157,158,5,124,0,0,158,46,1,
0,0,0,159,160,5,58,0,0,160,48,1,0,0,0,161,162,5,40,0,0,162,50,1,0,0,0,163,
164,5,41,0,0,164,52,1,0,0,0,165,166,5,91,0,0,166,54,1,0,0,0,167,168,5,93,
0,0,168,56,1,0,0,0,169,170,7,4,0,0,170,171,7,5,0,0,171,172,7,2,0,0,172,58,
1,0,0,0,173,174,7,1,0,0,174,175,7,0,0,0,175,176,7,6,0,0,176,60,1,0,0,0,177,
178,7,2,0,0,178,179,7,7,0,0,179,180,7,8,0,0,180,181,7,9,0,0,181,62,1,0,0,
0,182,183,7,10,0,0,183,184,7,6,0,0,184,185,7,9,0,0,185,64,1,0,0,0,186,187,
7,10,0,0,187,188,7,11,0,0,188,66,1,0,0,0,189,190,7,9,0,0,190,191,7,12,0,
0,191,192,7,0,0,0,192,193,7,6,0,0,193,68,1,0,0,0,194,195,7,0,0,0,195,196,
7,6,0,0,196,197,7,13,0,0,197,198,5,32,0,0,198,199,7,10,0,0,199,200,7,11,
0,0,200,70,1,0,0,0,201,202,7,14,0,0,202,203,7,12,0,0,203,204,7,10,0,0,204,
205,7,1,0,0,205,206,7,0,0,0,206,72,1,0,0,0,207,208,7,0,0,0,208,209,7,6,0,
0,209,210,7,13,0,0,210,211,5,32,0,0,211,212,7,14,0,0,212,213,7,12,0,0,213,
214,7,10,0,0,214,215,7,1,0,0,215,216,7,0,0,0,216,74,1,0,0,0,217,218,7,11,
0,0,218,219,7,15,0,0,219,220,7,8,0,0,220,76,1,0,0,0,221,222,7,9,0,0,222,
223,7,15,0,0,223,78,1,0,0,0,224,225,7,2,0,0,225,226,7,9,0,0,226,227,7,0,
0,0,227,228,7,16,0,0,228,80,1,0,0,0,229,230,7,6,0,0,230,231,7,0,0,0,231,
232,7,17,0,0,232,233,7,9,0,0,233,82,1,0,0,0,234,235,7,10,0,0,235,236,7,6,
0,0,236,237,7,16,0,0,237,238,7,18,0,0,238,239,7,9,0,0,239,84,1,0,0,0,240,
241,7,15,0,0,241,242,7,18,0,0,242,243,7,9,0,0,243,244,7,16,0,0,244,245,7,
18,0,0,245,246,7,9,0,0,246,86,1,0,0,0,247,251,7,19,0,0,248,250,7,20,0,0,
249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,88,1,
0,0,0,253,251,1,0,0,0,254,258,5,34,0,0,255,257,8,21,0,0,256,255,1,0,0,0,
257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,258,
1,0,0,0,261,271,5,34,0,0,262,266,5,39,0,0,263,265,8,22,0,0,264,263,1,0,0,
0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,268,266,
1,0,0,0,269,271,5,39,0,0,270,254,1,0,0,0,270,262,1,0,0,0,271,90,1,0,0,0,
272,274,7,23,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,
1,0,0,0,276,92,1,0,0,0,277,278,7,11,0,0,278,279,7,4,0,0,279,280,7,1,0,0,
280,281,7,2,0,0,281,287,7,0,0,0,282,283,7,9,0,0,283,284,7,8,0,0,284,285,
7,18,0,0,285,287,7,0,0,0,286,277,1,0,0,0,286,282,1,0,0,0,287,94,1,0,0,0,
288,289,7,6,0,0,289,290,7,18,0,0,290,291,7,1,0,0,291,297,7,1,0,0,292,293,
7,6,0,0,293,294,7,15,0,0,294,295,7,6,0,0,295,297,7,0,0,0,296,288,1,0,0,0,
296,292,1,0,0,0,297,96,1,0,0,0,298,299,5,47,0,0,299,300,5,47,0,0,300,304,
1,0,0,0,301,303,8,24,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,
304,305,1,0,0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,6,48,0,0,308,98,
1,0,0,0,309,311,7,25,0,0,310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,
312,313,1,0,0,0,313,314,1,0,0,0,314,315,6,49,0,0,315,100,1,0,0,0,316,318,
5,10,0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,
320,102,1,0,0,0,11,0,251,258,266,270,275,286,296,304,312,319,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class WDTPDLexer extends antlr4.Lexer {

    static grammarFileName = "WDTPD.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'='", "'ELSE'", "'|'", "'&'", "'^'", "'\\u2191'", 
                         "'**'", "','", "'!'", null, "'*'", "'/'", "'%'", 
                         "'+'", "'-'", "'<'", "'>'", "'<='", "'>='", "'=='", 
                         "'!='", "'&&'", "'||'", "':'", "'('", "')'", "'['", 
                         "']'", "'abs'", "'len'", "'sqrt'", "'int'", "'IF'", 
                         "'THEN'", "'END IF'", "'WHILE'", "'END WHILE'", 
                         "'FOR'", "'TO'", "'STEP'", "'NEXT'", "'INPUT'", 
                         "'OUTPUT'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          "COMMA", "NOT", "EXPONENT", "STAR", "SLASH", "PERCENT", 
                          "PLUS", "DASH", "LT", "GT", "LTE", "GTE", "DOUBLE_EQUAL", 
                          "DNE", "DOUBLE_AMPERSAND", "DOUBLE_PIPE", "COLON", 
                          "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
                          "ABS", "LEN", "SQRT", "INT_FUNC", "IF", "THEN", 
                          "END_IF", "WHILE", "END_WHILE", "FOR", "TO", "STEP", 
                          "NEXT", "INPUT", "OUTPUT", "ID", "STRING", "INTEGER", 
                          "BOOLEAN", "NULL", "COMMENT", "WS", "NL" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "COMMA", "NOT", "EXPONENT", "STAR", "SLASH", "PERCENT", 
                      "PLUS", "DASH", "LT", "GT", "LTE", "GTE", "DOUBLE_EQUAL", 
                      "DNE", "DOUBLE_AMPERSAND", "DOUBLE_PIPE", "COLON", 
                      "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
                      "ABS", "LEN", "SQRT", "INT_FUNC", "IF", "THEN", "END_IF", 
                      "WHILE", "END_WHILE", "FOR", "TO", "STEP", "NEXT", 
                      "INPUT", "OUTPUT", "ID", "STRING", "INTEGER", "BOOLEAN", 
                      "NULL", "COMMENT", "WS", "NL" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

WDTPDLexer.EOF = antlr4.Token.EOF;
WDTPDLexer.T__0 = 1;
WDTPDLexer.T__1 = 2;
WDTPDLexer.T__2 = 3;
WDTPDLexer.T__3 = 4;
WDTPDLexer.T__4 = 5;
WDTPDLexer.T__5 = 6;
WDTPDLexer.T__6 = 7;
WDTPDLexer.COMMA = 8;
WDTPDLexer.NOT = 9;
WDTPDLexer.EXPONENT = 10;
WDTPDLexer.STAR = 11;
WDTPDLexer.SLASH = 12;
WDTPDLexer.PERCENT = 13;
WDTPDLexer.PLUS = 14;
WDTPDLexer.DASH = 15;
WDTPDLexer.LT = 16;
WDTPDLexer.GT = 17;
WDTPDLexer.LTE = 18;
WDTPDLexer.GTE = 19;
WDTPDLexer.DOUBLE_EQUAL = 20;
WDTPDLexer.DNE = 21;
WDTPDLexer.DOUBLE_AMPERSAND = 22;
WDTPDLexer.DOUBLE_PIPE = 23;
WDTPDLexer.COLON = 24;
WDTPDLexer.OPEN_PAREN = 25;
WDTPDLexer.CLOSE_PAREN = 26;
WDTPDLexer.OPEN_BRACKET = 27;
WDTPDLexer.CLOSE_BRACKET = 28;
WDTPDLexer.ABS = 29;
WDTPDLexer.LEN = 30;
WDTPDLexer.SQRT = 31;
WDTPDLexer.INT_FUNC = 32;
WDTPDLexer.IF = 33;
WDTPDLexer.THEN = 34;
WDTPDLexer.END_IF = 35;
WDTPDLexer.WHILE = 36;
WDTPDLexer.END_WHILE = 37;
WDTPDLexer.FOR = 38;
WDTPDLexer.TO = 39;
WDTPDLexer.STEP = 40;
WDTPDLexer.NEXT = 41;
WDTPDLexer.INPUT = 42;
WDTPDLexer.OUTPUT = 43;
WDTPDLexer.ID = 44;
WDTPDLexer.STRING = 45;
WDTPDLexer.INTEGER = 46;
WDTPDLexer.BOOLEAN = 47;
WDTPDLexer.NULL = 48;
WDTPDLexer.COMMENT = 49;
WDTPDLexer.WS = 50;
WDTPDLexer.NL = 51;



